// <auto-generated />
using System;
using BetPlay.Infrastructure.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BetPlay.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(BetPlayDbContext))]
    [Migration("20230820203446_seeding-exampl-user")]
    partial class seedingexampluser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("BetPlay.Domain.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Odd")
                        .HasColumnType("REAL");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("BetPlay.Domain.BettingSlip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<float>("TotalOdds")
                        .HasColumnType("REAL");

                    b.Property<float>("TotalStake")
                        .HasColumnType("REAL");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BettingSlips");
                });

            modelBuilder.Entity("BetPlay.Domain.BettingSlipBet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BetId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BettingSlipId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.HasIndex("BettingSlipId");

                    b.ToTable("BettingSlipBets");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AssistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssistName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Elapsed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Extra")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FixtureId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.Fixture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AwayLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AwayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Elapsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FixtureLeagueId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GoalsAwayTeam")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GoalsHomeTeam")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HomeLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Referee")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScoreId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FixtureLeagueId");

                    b.HasIndex("ScoreId");

                    b.HasIndex("VenueId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.FixtureLeague", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Round")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Season")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("FixtureLeagues");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExtratimeAway")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExtratimeHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FulltimeAway")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FulltimeHome")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HalftimeAway")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HalftimeHome")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PenaltyAway")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PenaltyHome")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("BetPlay.Domain.League.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Flag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BetPlay.Domain.League.League", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("BetPlay.Domain.League.TrackedLeague", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrackedLeagues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acd08af2-130b-4f48-90aa-1b3e927d0ada"),
                            LeagueId = 78
                        },
                        new
                        {
                            Id = new Guid("8c4174ac-ca3a-40f5-8ce6-d4279f7e53bb"),
                            LeagueId = 39
                        },
                        new
                        {
                            Id = new Guid("a5f5e2f7-9606-4cd1-b0ae-7d8d26202f71"),
                            LeagueId = 140
                        },
                        new
                        {
                            Id = new Guid("9c97de7f-85e4-4697-99ca-8bc3c0819437"),
                            LeagueId = 135
                        },
                        new
                        {
                            Id = new Guid("ee97b77c-25cc-490d-8ef6-085c4c915c02"),
                            LeagueId = 61
                        });
                });

            modelBuilder.Entity("BetPlay.Domain.Team.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Founded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("National")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BetPlay.Domain.Team.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VenueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("BetPlay.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0df033d-4ff4-426b-a219-92641baf8fe4"),
                            Email = "user@gmail.com",
                            Name = "User",
                            Password = "@Haslo123",
                            Surname = "User"
                        });
                });

            modelBuilder.Entity("BetPlay.Domain.BettingSlip", b =>
                {
                    b.HasOne("BetPlay.Domain.User", "User")
                        .WithMany("BettingSlips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BetPlay.Domain.BettingSlipBet", b =>
                {
                    b.HasOne("BetPlay.Domain.Bet", "Bet")
                        .WithMany("BettingSlips")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetPlay.Domain.BettingSlip", "BettingSlip")
                        .WithMany("Bets")
                        .HasForeignKey("BettingSlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("BettingSlip");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.Event", b =>
                {
                    b.HasOne("BetPlay.Domain.Fixture.Fixture", "Fixture")
                        .WithMany("Events")
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.Fixture", b =>
                {
                    b.HasOne("BetPlay.Domain.Fixture.FixtureLeague", "FixtureLeague")
                        .WithMany()
                        .HasForeignKey("FixtureLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetPlay.Domain.Fixture.Score", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreId");

                    b.HasOne("BetPlay.Domain.Team.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");

                    b.Navigation("FixtureLeague");

                    b.Navigation("Score");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.FixtureLeague", b =>
                {
                    b.HasOne("BetPlay.Domain.League.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("BetPlay.Domain.League.League", b =>
                {
                    b.HasOne("BetPlay.Domain.League.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BetPlay.Domain.Team.Team", b =>
                {
                    b.HasOne("BetPlay.Domain.Team.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("BetPlay.Domain.Bet", b =>
                {
                    b.Navigation("BettingSlips");
                });

            modelBuilder.Entity("BetPlay.Domain.BettingSlip", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("BetPlay.Domain.Fixture.Fixture", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BetPlay.Domain.User", b =>
                {
                    b.Navigation("BettingSlips");
                });
#pragma warning restore 612, 618
        }
    }
}
